provision.auth.provider=oauth2


# configure technical user for rundeck. Do not authenticate via oauth2, since not implemented.
rundeck.admin_password=rundeck_admin
rundeck.admin_user=rundeck_admin

# configure technical user for bitbucket. Do not authenticate via oauth2, since not implemented.
bitbucket.admin_password=bitbucket_admin
bitbucket.admin_user=bitbucket_admin

# configure technical user for confluence. Do not authenticate via oauth2, since not implemented.
confluence.admin_password=confluence_admin
confluence.admin_user=confluence_admin

# configure technical user for jira. Do not authenticate via oauth2, since not implemented.
jira.admin_password=jira_admin
jira.admin_user=jira_admin

#name of opendevstack-users group in id manager (oauth2/keycloak in this profile)
idmanager.group.opendevstack-users=ls_opendevstack-users

#name of opendevstack-administrator group in id manager (oauth2/keycloak in this profile)
idmanager.group.opendevstack-administrators=ls_opendevstack-administrators

#name of opendevstack-administrator group in Bitbucket, Confluence and Jira
global.keyuser.role.name=${idmanager.group.opendevstack-administrators}

spring.http.log-request-details= true
spring.mail.host= 127.0.0.1

provision.cleanup.incomplete.projects=true

#see https://docs.spring.io/spring-security/site/docs/5.1.5.RELEASE/reference/html/jc.html#oauth2login-boot-property-mappings
spring.security.oauth2.client.registration.keycloak.client-id=ods-provisioning-app
spring.security.oauth2.client.registration.keycloak.client-secret=put-your-secret-here
spring.security.oauth2.client.registration.keycloak.clientName=ods-provisioning-app
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirectUri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.keycloak.scope=openid


# url to idmanager. Defaults to opendevstack idmanager box with keycloak installation
idmanager.url=http://192.168.56.32:8080
idmanager.realm=provisioning-app

# JsonPointer Expression that defines a path to the roles that are extracted from the id token.
oauth2.user.roles.jsonpointerexpression=/claims/roles
spring.security.oauth2.client.provider.keycloak.authorization-uri=${idmanager.url}/auth/realms/${idmanager.realm}/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=${idmanager.url}/auth/realms/${idmanager.realm}/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=${idmanager.url}/auth/realms/${idmanager.realm}/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${idmanager.url}/auth/realms/${idmanager.realm}/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
